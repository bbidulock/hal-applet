#!/usr/bin/perl

use Glib qw(TRUE FALSE);
use Gtk2;
use Gtk2::Notify;
use Gtk2::Unique;
use Net::DBus;
use Net::DBus::GLib;
use Net::Libdnet::Intf;
use Data::Dumper;

Gtk2->init;
Gtk2::Notify->init("hal-applet");

my $app;

# ---------------------------------------------------
package Hal;
use strict;

use constant {
	DEVICE_COLUMN_UDI   => 0,
};

# ---------------------------------------------------
package Hal::Manager;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my $srv = Net::DBus::GLib->system->get_service('org.freedesktop.Hal');
	my $self = bless $srv->get_object('/org/freedesktop/Hal/Manager'), shift;
	my $appl = shift;

	foreach my $id ('DeviceAdded', 'DeviceRemoved', 'NewCapability') {
		my $call = $id;
		$self->{sigids}{$id} = $self->connect_to_signal($id,sub{ $appl->$call($self,@_); });
	}
	return $self;
}
sub destroy {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{sigids}}) {
		$self->disconnect_from_signal($name,$sigid);
	}
}

# ---------------------------------------------------
package Hal::DeviceProps;
use base qw(Gtk2::Window);
use Glib qw(TRUE FALSE);
use strict;

our $deviceProps;

sub get {
	return $deviceProps if $deviceProps;
	return new Hal::DeviceProps;
}
sub add_column {
	my ($view,$label,$id,$sort) = @_;
	my $renderer = Gtk2::CellRendererText->new;
	my $offset = $view->insert_column_with_attributes(
			-1,$label,$renderer,text=>$id);
	my $column = $view->get_column($offset - 1);
	$column->set_clickable(TRUE);
	$column->set_sort_column_id($id) if $sort;
}
sub new {
	my $self = bless Gtk2::Window->new('toplevel'), shift;
	$self->set_wmclass('halDeviceProps','HalApplet');
	$self->set_title('Device Properties');
	$self->set_gravity('center');
	$self->set_icon_name('utilities-system-monitor');
	$self->signal_connect(destroy=>sub{$deviceProps=undef; 1});
	$self->set_border_width(8);

	my $vbox = Gtk2::VBox->new(FALSE,8);
	$self->add($vbox);

	my $sw = Gtk2::ScrolledWindow->new;
	$sw->set_shadow_type('etched-in');
	$sw->set_policy('never','automatic');
	$vbox->pack_start($sw,TRUE,TRUE,0);

	my $model = Gtk2::TreeStore->new(
		'Glib::String',
		'Glib::String',
	);
	$self->{store} = $model;

	my $view = Gtk2::TreeView->new($model);
	$view->set_rules_hint(TRUE);
	$view->set_search_column(0);
#	$view->set_hover_expand(1);
	$sw->add($view);
	$self->{view} = $view;

	my @columns = (
		['Property',	0,	1],
		['Value',	1,	1],
	);

	foreach my $col (@columns) { add_column($view,@$col); }

	$self->set_default_size(-1,400);
	$self->show_all;

	$deviceProps = $self;
	return $self;
}
sub show_props {
	my ($self,$selection) = @_;
	my ($model,$iter) = $selection->get_selected;
	my $udi = $model->Gtk2::TreeModel::get($iter,&Hal::DEVICE_COLUMN_UDI);
	my $device = $model->{objects}{$udi};
	if ($device) {
		my $props = $device->GetAllProperties;
		my $tree = {};
		foreach my $key (sort keys %$props) {
			my $val = $props->{$key};
			if (ref($val) eq 'ARRAY') {
				$val = join("\n",@$val);
			}
			my ($class,$prop) = split(/\./,$key);
			push @{$tree->{$class}},[$prop,$val];
		}
		my $store = $self->{store};
		$store->clear;
		foreach my $class ('info', 'linux') {
			next unless exists $tree->{$class};
			my $iter = $store->append(undef);
			$store->set($iter,
				0, $class,
				1, '',
			);
			foreach my $vals (@{$tree->{$class}}) {
				my ($prop,$val) = @$vals;
				my $citer = $store->append($iter);
				$store->set($citer,
					0, $prop,
					1, $val,
				);
			}
		}
		delete $tree->{info};
		delete $tree->{linux};
		foreach my $class (sort keys %$tree) {
			my $iter = $store->append(undef);
			$store->set($iter,
				0, $class,
				1, '',
			);
			foreach my $vals (@{$tree->{$class}}) {
				my ($prop,$val) = @$vals;
				my $citer = $store->append($iter);
				$store->set($citer,
					0, $prop,
					1, $val,
				);
			}
		}
#		$self->{view}->expand_all;
		$self->{view}->expand_row(Gtk2::TreePath->new('0'),TRUE);
		$self->{view}->expand_row(Gtk2::TreePath->new('1'),TRUE);
		$self->deiconify;
		$self->show;
	} else {
		print STDERR "NO ENTRY FOR $udi!\n";
	}
}

# ---------------------------------------------------
package Hal::DeviceModel;
use base qw(Gtk2::ListStore);
use strict;

our $deviceModel;

sub get {
	return $deviceModel if $deviceModel;
	return new Hal::DeviceModel;
}
sub new {
	$deviceModel = bless Gtk2::ListStore->new(
		'Glib::String', # udi
		'Glib::String', # info.category
		'Glib::String', # linux.subsystem
		'Glib::String', # linux.device_file
	), shift;
	$deviceModel->{count} = 0;
	return $deviceModel;
}

# ---------------------------------------------------
package Hal::Device;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my ($type,$appl,$udi) = @_;
	my $mngr = $appl->{mngr};
	my $self = bless $mngr->get_service->get_object($udi), $type;
	$udi =~ s/^.*\///;
	$self->{udi} = $udi;
	foreach my $id ('PropertyModified', 'Condition', 'InterfaceLockAcquired',
			'InterfaceLockReleased') {
		my $call = $id;
		$self->{sigids}{$id} = $self->connect_to_signal($id,sub{ $appl->$call($self,@_); });
	}
#	$self->{props} = $self->GetAllProperties;
	$self->{category} = '';
	$self->{subssytem} = '';
	$self->{device_file} = '';
	$self->{category}    = $self->GetPropertyString('info.category')     if $self->PropertyExists('info.category');
	$self->{subsystem}   = $self->GetPropertyString('linux.subsystem')   if $self->PropertyExists('linux.subsystem');
	$self->{device_file} = $self->GetPropertyString('linux.device_file') if $self->PropertyExists('linux.device_file');
	$self->{device_file} = $self->GetPropertyString('net.interface')     if $self->PropertyExists('net.interface');
	my $store = get Hal::DeviceModel;
	my $iter = $self->{iter} = $store->append;
	$store->{count}++;
	$store->{objects}{$udi} = $self;
	$store->set($iter,
		&Hal::DEVICE_COLUMN_UDI,	$udi,
		1,				$self->{category},
		2,				$self->{subsystem},
		3,				$self->{device_file},
	);
	return $self;
}
sub destroy {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{sigids}}) {
		$self->disconnect_from_signal($name,$sigid);
	}
}
sub del {
	my $self = shift;
	my $store = get Hal::UnitModel;
	my $iter = delete $self->{iter};
	my $udi = $self->{udi};
	$store->{count}--;
	delete $store->{objects}{$udi};
	$store->remove($iter);
	$self->destroy;
}

# ---------------------------------------------------
package Hal::DeviceWindow;
use base qw(Gtk2::Window);
use Glib qw(TRUE FALSE);
use strict;

our $deviceWindow;

sub get {
	return $deviceWindow if $deviceWindow;
	return new Hal::DeviceWindow;
}
sub add_column {
	my ($view,$label,$id,$sort) = @_;
	my $renderer = Gtk2::CellRendererText->new;
	my $column = Gtk2::TreeViewColumn->new_with_attributes(
		$label,$renderer,text=>$id);
	$column->set_sort_column_id($id) if $sort;
	$view->append_column($column);
}
sub new {
	my $self = bless Gtk2::Window->new('toplevel'), shift;
	$self->set_wmclass('halDevices','HalApplet');
	$self->set_title('Devices');
	$self->set_gravity('center');
	$self->set_position('center');
	$self->set_icon_name('utilities-system-monitor');
	$self->signal_connect(destroy=>sub{$deviceWindow = undef; 1});
	$self->set_border_width(8);

	my $vbox = Gtk2::VBox->new(FALSE,8);
	$self->add($vbox);

	my $sw = Gtk2::ScrolledWindow->new;
	$sw->set_shadow_type('etched-in');
	$sw->set_policy('never','automatic');
	$vbox->pack_start($sw,TRUE,TRUE,0);

	my $model = get Hal::DeviceModel;

	my $view = Gtk2::TreeView->new($model);
	$view->set_rules_hint(TRUE);
	$view->set_search_column(&Hal::DEVICE_COLUMN_UDI);
	$sw->add($view);

	my @columns = (
		['UDI',		&Hal::DEVICE_COLUMN_UDI,		1],
		['Category',	1,					1],
		['Subsystem',	2,					1],
		['Device',	3,					1],
	);

	foreach my $col (@columns) { add_column($view,@$col); }

	my $selection = $view->get_selection;
	$selection->signal_connect_swapped(changed=>$self->can('changed'),$self);

	foreach my $event ('button_press_event') {
		$view->signal_connect_swapped($event=>$self->can($event),$self);
	}

	$self->set_default_size(-1,500);
	$self->show_all;

	$deviceWindow = $self;
	return $self;
}
sub button_press_event {
	my $self = shift;
	my ($ev,$view) = @_;
	return Gtk2::EVENT_PROPAGATE unless $ev->button == 3;
	my ($path,$column) = $view->get_path_at_pos($ev->x,$ev->y);
	my $selection = $view->get_selection;
	$selection->select_path($path);
	my ($menu,$mi) = Gtk2::Menu->new;
	$mi = Gtk2::MenuItem->new_with_label("properties...");
	$mi->signal_connect(activate=>sub{
			Hal::DeviceProps->get->show_props($selection);
		});
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::SeparatorMenuItem->new;
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::MenuItem->new_with_label("some action");
	$mi->show_all;
	$menu->append($mi);
	$menu->popup(undef,undef,undef,undef,$ev->button,$ev->time);
	return Gtk2::EVENT_STOP;
}
sub changed {
	my $self = shift;
	$Hal::DeviceProps::deviceProps->show_props(shift)
		if $Hal::DeviceProps::deviceProps;
	return Gtk2::EVENT_PROPAGATE;
}
sub row_activated {
	my $self = shift;
	print STDERR "row_activated: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub test_expand_row {
	my $self = shift;
	print STDERR "test_expand_row: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub test_collapse_row {
	my $self = shift;
	print STDERR "test_collapse_row: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub row_expanded {
	my $self = shift;
	print STDERR "row_expanded: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub row_collapsed {
	my $self = shift;
	print STDERR "row_collapsed: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub select_cursor_row {
	my $self = shift;
	print STDERR "select_cursor_row: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub toggle_cursor_row {
	my $self = shift;
	print STDERR "toggle_cursor_row: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub expand_collapse_cursor_row {
	my $self = shift;
	print STDERR "expand_collapse_cursor_row: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub select_cursor_parent {
	my $self = shift;
	print STDERR "select_cursor_parent: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub start_interactive_search {
	my $self = shift;
	print STDERR "start_interactive_search: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub button_release_event {
	my $self = shift;
	print STDERR "button_release_event: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub selection_clear_event {
	my $self = shift;
	print STDERR "selection_clear_event: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub selection_request_event {
	my $self = shift;
	print STDERR "selection_request_event: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub selection_notify_event {
	my $self = shift;
	print STDERR "selection_notify_event: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub query_tooltip_event {
	my $self = shift;
	print STDERR "query_tooltip_event: ",join(',',@_),"\n";
	return Gtk2::EVENT_PROPAGATE;
}

# -----------------------------------------------------------
package Hal::About;
use strict;

sub show {
	Gtk2->show_about_dialog($main::app->{mainw},
		logo_icon_name=>'utilities-system-monitor',
		program_name=>'hal-applet',
		version=>'0.01',
		comments=>'A little HAL applet.',
		copyright=>'Copyright (c) 2013  OpenSS7 Corporation.',
		website=>'http://www.unexicon.com/',
		website_label=>'Unexicon - Linux spun for telecom',
		authors=>['Brian F. G. Bidulock <bidulock@openss7.org>'],
		license=><<EOF,
Do what thou wilt shall be the whole of the law.

-- Aleister Crowley
EOF
		# logo=>,
	);
}

# ---------------------------------------------------
package Hal::Notify;
use base qw(Gtk2::Notify);
use strict;

sub new {
	my $self = bless Gtk2::Notify->new("Hal","Hal notification","utilities-system-monitor"), shift;
	$self->signal_connect_swapped(closed=>$self->can('closed'),$self);
	$self->{state} = 0;
	$self->show;
	return $self;
}
sub closed {
	my ($self,$notify) = @_;
	$self->{state} = 0;
	return Gtk2::EVENT_PROPAGATE;
}

# ---------------------------------------------------
package Hal::Icon;
use base qw(Gtk2::StatusIcon);
use strict;

sub new {
	my $self = bless Gtk2::StatusIcon->new_from_icon_name('utilities-system-monitor'), shift;
	$self->{notify} = Hal::Notify->new($self);
	$self->set_tooltip_text('Hal applet.');
	$self->set_visible(1);
	foreach my $sig ('popup_menu', 'activate', 'query_tooltip') {
		$self->signal_connect($sig=>$self->can($sig));
	}
	return $self;
}
sub query_tooltip {
	my ($self,$x,$y,$bool,$tooltip) = @_;
	my $store = get Hal::DeviceModel;
#	print "query-tooltip: ",join(', ',@_),"\n";
#	print "Tooltip query!\n";
	$self->set_tooltip_text("Monitoring $store->{count} devices.");
	return Gtk2::EVENT_PROPAGATE;
}
sub activate {
	my ($self,$icon) = @_;
	my $window = get Hal::DeviceWindow;
	$window->deiconify;
	$window->show;
	return Gtk2::EVENT_PROPAGATE;
}
sub popup_menu {
	my ($self,$button,$time,$icon) = @_;
	my ($menu,$mi,$im) = Gtk2::Menu->new;
	$mi = Gtk2::ImageMenuItem->new_with_label('Devices...');
	$mi->signal_connect(activate=>sub{ get Hal::DeviceWindow; 1; });
	$im = Gtk2::Image->new_from_icon_name('utilities-system-monitor','menu');
	$mi->set_image($im);
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::ImageMenuItem->new_with_label('About...');
	$mi->signal_connect(activate=>sub{ Hal::About->show; });
	$im = Gtk2::Image->new_from_stock('gtk-about','menu');
	$mi->set_image($im);
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::SeparatorMenuItem->new;
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::ImageMenuItem->new_with_label('Quit');
	$im = Gtk2::Image->new_from_stock('gtk-quit','menu');
	$mi->set_image($im);
	$mi->show_all;
	$mi->signal_connect(activate=>sub{ Gtk2->main_quit(); 1; });
	$menu->append($mi);
	$menu->popup(undef,undef,undef,undef,$button,$time);
	return Gtk2::EVENT_PROPAGATE;
}
sub button_press_event {
	my ($self,$event) = @_;
#	print "button-press-event: ",join(', ',@_),"\n";
#	print "Button pressed!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub button_release_event {
	my ($self,$event) = @_;
#	print "button-release-event: ",join(', ',@_),"\n";
#	print "Button released!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub scroll_event {
	my ($self,$event) = @_;
#	print "scroll-event: ",join(', ',@_),"\n";
#	print "Scroll!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub size_changed {
	my ($self,$pixels) = @_;
#	print "size-changed: ",join(', ',@_),"\n";
#	print "Size changed to $pixels!\n";
	return Gtk2::EVENT_PROPAGATE;
}

# ---------------------------------------------------
package Hal::Application;
use base qw(Gtk2::UniqueApp);
use Glib qw(TRUE FALSE);
use strict;

use constant {
	COMMAND_APPLET	=> 1,
	COMMAND_DEVICES	=> 2,
};

sub new {
	my $self = bless Gtk2::UniqueApp->new(
		'com.unexicon.HalApplet', undef,
		'hal-applet'	=> &COMMAND_APPLET,
		'hal-devices'	=> &COMMAND_DEVICES,
	), shift;
	if ($self->is_running) {
		my $cmd = $0; $cmd =~ s/^.*\///;
		$self->send_message_by_name($cmd=>text=>join('|',$0,@ARGV));
		print STDERR "Another instance of $cmd is already running.\n";
		exit(0);
	}
	$self->{mainw} = Gtk2::Window->new('toplevel');
	$self->{mainw}->set_wmclass('halApplet','HalApplet');
	$self->{mainw}->set_default_icon_name('utilities-system-monitor');
	$self->watch_window($self->{mainw});
	$self->signal_connect(message_received=>
		$self->can('message_received'));
	$self->{icon} = new Hal::Icon;

	$self->{devices} = {};
	my $mngr = $self->{mngr} = Hal::Manager->new($self);
	$self->GetAllDevices;
	return $self;
}

sub message_received {
	my ($self,$command,$message,$time) = @_;
	if ($command == &COMMAND_DEVICES) {
		my $win = get Hal::DeviceWindow;
		$win->set_screen($message->get_screen);
	} elsif ($command == &COMMAND_APPLET) {
		my $text = $message->get_text;
		my @args = split(/\|/,$text);
		my $prog = shift @args;
		print STDERR "Another instance was executed as $prog ",join(' ',@args),"\n";
	} else {
		print STDERR "Bad command value $command\n";
	}
	return 'ok';
}

sub GetAllDevices {
	my $self = shift;
	my $mngr = $self->{mngr};
	my $udis = $mngr->GetAllDevices;
	foreach my $udi (@$udis) {
		$self->{devices}{$udi} = 
			Hal::Device->new($self,$udi)
			unless exists $self->{devices}{$udi}
				  and $self->{devices}{$udi};
	}
}

sub DeviceAdded {
	my $self = shift;
	my $mngr = shift;
	my ($udi) = @_;
	print STDERR "DeviceAdded: ",join(',',@_),"\n";
	print STDERR "  udi: $udi\n";
	$self->{devices}{$udi} =
		Hal::Device->new($self,$udi)
		unless exists $self->{devices}{$udi}
			  and $self->{devices}{$udi};
}
sub DeviceRemoved {
	my $self = shift;
	my $mngr = shift;
	my ($udi) = @_;
	print STDERR "DeviceRemove: ",join(',',@_),"\n";
	print STDERR "  udi: $udi\n";
	my $device = delete $self->{devices}{$udi};
	$device->del if $device;
}
sub NewCapability {
	my $self = shift;
	my $mngr = shift;
	my ($udi,$cap_name) = @_;
	print STDERR "NewCapability: ",join(',',@_),"\n";
	print STDERR "  udi: $udi\n";
	print STDERR "  cap_name: $cap_name\n";
}

sub PropertyModified {
	my $self = shift;
	my $node = shift;
	my ($num_updates,$updates) = @_;
	print STDERR "PropertyModified: ",join(',',@_),"\n";
	foreach my $update (@$updates) {
		my ($string,$bool1,$bool2) = @$update;
		print STDERR "  string: $string\n";
		print STDERR "    bool1: $bool1\n";
		print STDERR "    bool2: $bool2\n";
	}
}
sub Condition {
	my $self = shift;
	my $node = shift;
	my ($cond_name,$cond_details) = @_;
	print STDERR "Condition: ",join(',',@_),"\n";
	print STDERR "  cond_name: $cond_name\n";
	print STDERR "  cond_name: $cond_details\n";
}
sub InterfaceLockAcquired {
	my $self = shift;
	my $node = shift;
	my ($interface_name,$lock_holder,$num_locks) = @_;
	print STDERR "InterfaceLockAcquired: ",join(',',@_),"\n";
	print STDERR "  interface_name: $interface_name\n";
	print STDERR "  lock_holder: $lock_holder\n";
	print STDERR "  num_locks: $num_locks\n";
}
sub InterfaceLockReleased {
	my $self = shift;
	my $node = shift;
	my ($interface_name,$lock_holder,$num_locks) = @_;
	print STDERR "InterfaceLockReleased: ",join(',',@_),"\n";
	print STDERR "  interface_name: $interface_name\n";
	print STDERR "  lock_holder: $lock_holder\n";
	print STDERR "  num_locks: $num_locks\n";
}

# ---------------------------------------------------
package main;
use strict;

$app = new Hal::Application;

Gtk2->main;
